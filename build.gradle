buildscript {
    project.ext.set("springVersion", "3.0.6")
    project.ext.set("springPlugin", "1.1.0")
    project.ext.set("hibernate.version", "6.2.3.Final") // https://hibernate.atlassian.net/browse/HHH-16169

    repositories {
        // for quality
        gradlePluginPortal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "$nexusBaseUrl/maven-releases/"
            allowInsecureProtocol = true
            credentials {
                username = "$nexusId"
                password = "$nexusPassword"
            }
        }
    }
    dependencies {
        // lombok
        classpath "io.franzbecker:gradle-lombok:5.0.0"
        // for quality
        classpath 'ru.vyarus:gradle-quality-plugin:4.7.0'
        // ascii doctor
        classpath "org.asciidoctor:asciidoctor-gradle-jvm:3.3.2"
        // spring boot
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${springPlugin}"
        // commit lint
        classpath "ru.netris:commitlint-plugin:1.4.1"
        classpath "com.star-zero.gradle:githook:1.2.1"
        // gradle shared.
        classpath 'com.mco:gradle-repository:1.2.12'

        dependencies {
            delete "gradle/ext"
            def jars = configurations.classpath.files as List<File>
            ant.unjar src: jars.find { it.name.matches '.*gradle-repository.*' }, dest: 'gradle/ext'
        }
    }
}

allprojects {

    group 'com.mco.playground'
    version '1.0'

    repositories {
        mavenLocal()    // maven local cache repository
        mavenCentral()
        google()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo1.maven.org/maven2/" }
        maven {
            allowInsecureProtocol = true
            url "$nexusBaseUrl/maven-releases/"
            credentials {
                username = "$nexusId"
                password = "$nexusPassword"
            }
        }
    }
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
//    tasks.named("processResources") { duplicatesStrategy = DuplicatesStrategy.EXCLUDE }
    tasks.withType(org.gradle.jvm.tasks.Jar) {
        duplicatesStrategy = 'include'
    }
}

subprojects {
    apply from : "${project.getRootDir()}/gradle/ext/common.gradle"
    apply from : "${project.getRootDir()}/gradle/ext/test.gradle"
    apply from : "${project.getRootDir()}/gradle/ext/quality.gradle"
    apply from : "${project.getRootDir()}/gradle/ext/git.lint.gradle"
}