name: Production build.

on:
  pull_request:
    types:
      - closed
    branches: [ "main" ]

env:
  MODULE_NAME_1: app:grassland
  APPLICATION_NAME_1: mco-playground-grassland
  MODULE_NAME_2: app:zoo
  APPLICATION_NAME_2: mco-playground-zoo
  MODULE_NAME_3: aid:employee
  LIBRARY_NAME: employee-object

jobs:
  tagging:
    name: Bump version tag
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-20.04

    outputs:
      new_version: ${{ steps.tag_version.outputs.new_tag }}
      tag: ${{ steps.tag_version.outputs.tag }}
      part: ${{ steps.tag_version.outputs.part }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          # todo: Add all of team members
          approvers: sghwang-mcorpor,keepbang
          minimum-approvals: 1

      - name: Bump version and push tag
        id: tag_version
        uses: anothrNick/github-tag-action@1.67.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: false
          DEFAULT_BUMP: patch # pr 날릴때 major 추가해서 사용

  application-deploy:
    name: application deploy
    needs: [tagging]
    runs-on: ubuntu-20.04

    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Check my source
        run: pwd && ls -al

      - name: Init gradle
        run: |
          mkdir -p ~/.gradle/
          chmod +x ./gradle-init_obf.sh
          ./gradle-init_obf.sh
        shell: bash

      - name: Build with Gradle
        run: ./gradlew ${{ env.MODULE_NAME_1 }}:build

      - name: Build with Gradle
        run: ./gradlew ${{ env.MODULE_NAME_2 }}:build

      - name: Nexus Repo Publish
        run: ./gradlew ${{ env.MODULE_NAME_3 }}:publish -DVERSION=${{ needs.tagging.outputs.new_version }}

      - name: Build Changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create a GitHub release
        id: github_release
        uses: ncipollo/release-action@v1
        with:
          #          skipIfReleaseExists: true
          tag: ${{ needs.tagging.outputs.new_version }}
          name: Release ${{ needs.tagging.outputs.new_version }}
          body: |
            ${{steps.build_changelog.outputs.changelog}}

      # 어플리케이션 1 노션 데이터베이스에 추가
      - name: Notion release notes ${{ env.MODULE_NAME_1 }} application
        uses: infinitaslearning/notion-release-notes@v0.6
        with:
          token: ${{ secrets.NOTION_TOKEN }}
          database: ${{ secrets.NOTION_RELEASE_NOTE_DATABASE }}
          name: ${{ env.APPLICATION_NAME_1 }}-${{ needs.tagging.outputs.new_version }}
          tags: ${{ needs.tagging.outputs.new_version }}, ${{ github.event.repository.name }}:${{ env.MODULE_NAME_1 }}
          body: ${{ steps.build_changelog.outputs.changelog }}

      # 어플리케이션 2 노션 데이터베이스에 추가
      - name: Notion release notes ${{ env.MODULE_NAME_2 }} application
        uses: infinitaslearning/notion-release-notes@v0.6
        with:
          token: ${{ secrets.NOTION_TOKEN }}
          database: ${{ secrets.NOTION_RELEASE_NOTE_DATABASE }}
          name: ${{ env.APPLICATION_NAME_2 }}-${{ needs.tagging.outputs.new_version }}
          tags: ${{ needs.tagging.outputs.new_version }}, ${{ github.event.repository.name }}:${{ env.MODULE_NAME_2 }}
          body: ${{ steps.build_changelog.outputs.changelog }}

      # 라이브러리 1 노션 데이터베이스에 추가
      - name: Notion release notes ${{ env.MODULE_NAME_3 }} library
        uses: infinitaslearning/notion-release-notes@v0.6
        with:
          token: ${{ secrets.NOTION_TOKEN }}
          database: ${{ secrets.NOTION_RELEASE_NOTE_DATABASE }}
          name: ${{ env.LIBRARY_NAME }}-${{ needs.tagging.outputs.new_version }}
          tags: ${{ needs.tagging.outputs.new_version }}, ${{ github.event.repository.name }}:${{ env.MODULE_NAME_3 }}
          body: ${{ steps.build_changelog.outputs.changelog }}


  branch-release:
    name: released branch rename
    needs: [tagging, application-deploy]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check my source
        run: pwd && ls -al

      - name: Set variables
        id: branch_variables
        run: |
          old_branch="${{ needs.tagging.outputs.part }}/${{ needs.tagging.outputs.tag }}"
          new_branch="${{ needs.tagging.outputs.part }}/${{ needs.tagging.outputs.tag }}-released"
          echo "OLD_BRANCH=$old_branch" >> $GITHUB_OUTPUT
          echo "NEW_BRANCH=$new_branch" >> $GITHUB_OUTPUT

      - name: Rename released branch
        id: rename_branch
        run: |
          # Rename branch
          # git push <remote> <remote>/<old_name>:refs/heads/<new_name> :<old_name>
          git push origin origin/${{ steps.branch_variables.outputs.OLD_BRANCH }}:refs/heads/${{ steps.branch_variables.outputs.NEW_BRANCH }} :${{ steps.branch_variables.outputs.OLD_BRANCH }}
        if: ${{ needs.tagging.outputs.part != 'patch' }}
