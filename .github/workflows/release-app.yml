name: Production build.

on:
  pull_request:
    types:
      - closed
    branches: [ "main" ]

env:
  MODULE_NAME_1: app:grassland
  APPLICATION_NAME_1: mco-playground-grassland
  MODULE_NAME_2: app:zoo
  APPLICATION_NAME_2: mco-playground-zoo
  MODULE_NAME_3: aid:employee
  LIBRARY_NAME: employee-object

jobs:
  application-deploy:
    uses: ./.github/workflows/deploy.yml

  rename-released-branch:
    name: Rename released branch
    if: ${{ needs.application-deploy.outputs.part != 'patch' }}
    needs: [application-deploy]
    runs-on: ubuntu-20.04
    outputs:
      part: ${{ needs.application-deploy.outputs.part }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check my source
        run: pwd && ls -al

      - name: Set variables
        id: branch_variables
        run: |
          old_branch="${{ needs.application-deploy.outputs.part }}/${{ needs.application-deploy.outputs.tag }}"
          new_branch="${{ needs.application-deploy.outputs.part }}/${{ needs.application-deploy.outputs.tag }}-released"
          echo "OLD_BRANCH=$old_branch" >> $GITHUB_OUTPUT
          echo "NEW_BRANCH=$new_branch" >> $GITHUB_OUTPUT

      - name: Rename branch
        id: rename_branch
        run: |
          # Rename branch
          # git push <remote> <remote>/<old_name>:refs/heads/<new_name> :<old_name>
          git push origin origin/${{ steps.branch_variables.outputs.OLD_BRANCH }}:refs/heads/${{ steps.branch_variables.outputs.NEW_BRANCH }} :${{ steps.branch_variables.outputs.OLD_BRANCH }}

  create-next-version:
    name: Create next version
    needs: [application-deploy]
    uses: ./.github/workflows/create-next-semver.yml

  create-next-version-branches:
    needs: [create-next-version, rename-released-branch]
    uses: ./.github/workflows/create-next-version-branches.yml
    with:
      next_major_version: ${{ needs.create-next-version.outputs.next_major_version }}
      next_minor_version: ${{ needs.create-next-version.outputs.next_minor_version }}
      part: ${{ needs.rename-released-branch.outputs.part }}

  sync_major_train:
    if: ${{ needs.create-next-version-branches.outputs.major_created }}
    runs-on: ubuntu-20.04
    name: Sync major train from upstream repo
    needs: [create-next-version, create-next-version-branches]
    steps:
      # REQUIRED step
      # Step 1: run a standard checkout action, provided by github
      - name: Checkout target repo
        uses: actions/checkout@v3
        with:
          # optional: set the branch to checkout,
          # sync action checks out your 'target_sync_branch' anyway
          ref: major/${{ needs.create-next-version-branches.outputs.next_major_version }}
          # REQUIRED if your upstream repo is private (see wiki)
          persist-credentials: false

      # REQUIRED step
      # Step 2: run the sync action
      - name: Sync upstream changes
        id: sync
        uses: aormsby/Fork-Sync-With-Upstream-action@v3.4
        with:
          target_sync_branch: major/${{ needs.create-next-version-branches.outputs.next_major_version }}
          # REQUIRED 'target_repo_token' exactly like this!
          target_repo_token: ${{ secrets.GITHUB_TOKEN }}
          upstream_sync_branch: ${{ env.UPSTREAM_BRANCH }}
          upstream_sync_repo: mcorporation-dev/${{ github.event.repository.name }}
          upstream_repo_access_token: ${{ secrets.GITHUB_TOKEN }}

          # Set test_mode true to run tests instead of the true action!!
          test_mode: false

      # Step 3: Display a sample message based on the sync output var 'has_new_commits'
      - name: New commits found
        if: steps.sync.outputs.has_new_commits == 'true'
        run: echo "New commits were found to sync."

      - name: No new commits
        if: steps.sync.outputs.has_new_commits == 'false'
        run: echo "There were no new commits."

  sync_minor_train:
    if: ${{ needs.create-next-version-branches.outputs.minor_created }}
    runs-on: ubuntu-20.04
    name: Sync minor train from upstream repo
    needs: [create-next-version, create-next-version-branches]
    steps:
      # REQUIRED step
      # Step 1: run a standard checkout action, provided by github
      - name: Checkout target repo
        uses: actions/checkout@v3
        with:
          # optional: set the branch to checkout,
          # sync action checks out your 'target_sync_branch' anyway
          ref: minor/${{ needs.create-next-version-branches.outputs.next_minor_version }}
          # REQUIRED if your upstream repo is private (see wiki)
          persist-credentials: false

      # REQUIRED step
      # Step 2: run the sync action
      - name: Sync upstream changes
        id: sync
        uses: aormsby/Fork-Sync-With-Upstream-action@v3.4
        with:
          target_sync_branch: minor/${{ needs.create-next-version-branches.outputs.next_minor_version }}
          # REQUIRED 'target_repo_token' exactly like this!
          target_repo_token: ${{ secrets.GITHUB_TOKEN }}
          upstream_sync_branch: ${{ env.UPSTREAM_BRANCH }}
          upstream_sync_repo: mcorporation-dev/${{ github.event.repository.name }}
          upstream_repo_access_token: ${{ secrets.GITHUB_TOKEN }}

          # Set test_mode true to run tests instead of the true action!!
          test_mode: false

      # Step 3: Display a sample message based on the sync output var 'has_new_commits'
      - name: New commits found
        if: steps.sync.outputs.has_new_commits == 'true'
        run: echo "New commits were found to sync."

      - name: No new commits
        if: steps.sync.outputs.has_new_commits == 'false'
        run: echo "There were no new commits."